/*Editor: Johnson Gao

 * Date This Project Created:June 2019
 * Description Of This Class: This is to test the lyric reader only.
 */
package journeylove;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javazoom.jl.decoder.JavaLayerException;

/**
 * This is to test the lyric reader only.
 * @author app
 */
public class TestLyricReader extends javax.swing.JFrame
{

    private static final long serialVersionUID = 1L;

    public static final FileNameExtensionFilter LYRIC_FILTER = new FileNameExtensionFilter("lyric file(.lrc)", "lrc");
    // private File lyricFile;
    /**
     * Creates new form TestLyricReader.
     */
    public TestLyricReader()
    {
        super("Test Lyric Reader");
        initComponents();
        lyricTimer = new Timer(500, (ActionEvent e) ->
        {
            refreshLyric(myClip.getMicrosecondPosition());
        });
        try
        {
            myClip = AudioSystem.getClip();
            myClip.addLineListener((LineEvent event) ->
            {
                LineEvent.Type type = event.getType();
                if(type.equals(LineEvent.Type.STOP))
                {
                    lyricTimer.stop();
                }
            });
        } catch (LineUnavailableException ex)
        {
            Logger.getLogger(TestLyricReader.class.getName()).log(Level.SEVERE, null, ex);
        }
        getContentPane().setBackground(new Color(153,255,255));
    }

    /**                                     Made by Johnson Gao
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        lyricTitleLabel = new javax.swing.JLabel();
        artistLabel = new javax.swing.JLabel();
        editorLabel = new javax.swing.JLabel();
        albumLabel = new javax.swing.JLabel();
        offsetLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        positionSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        openMusic = new javax.swing.JButton();
        convertButton = new javax.swing.JButton();
        onlineLyricButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        perviousLineLable = new javax.swing.JLabel();
        currentLineLabel = new javax.swing.JLabel();
        nextLineLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setText("Test Lyric Reader");

        lyricTitleLabel.setText("Title:");

        artistLabel.setText("Artist:");

        editorLabel.setText("Editor:");

        albumLabel.setText("Album:");

        offsetLabel.setText("Offset:");

        startButton.setBackground(new java.awt.Color(102, 255, 102));
        startButton.setText("start");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startButtonActionPerformed(evt);
            }
        });

        pauseButton.setBackground(new java.awt.Color(255, 255, 0));
        pauseButton.setText("pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setBackground(new java.awt.Color(255, 51, 51));
        stopButton.setText("stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                stopButtonActionPerformed(evt);
            }
        });

        positionSlider.setBorder(BorderFactory.createTitledBorder("Position"));
        positionSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                positionSliderStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("方正有猫在简体", 0, 18)); // NOI18N
        jLabel2.setText(":");

        openButton.setText("Open .lrc");
        openButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openButtonActionPerformed(evt);
            }
        });

        openMusic.setText("open music");
        openMusic.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openMusicActionPerformed(evt);
            }
        });

        convertButton.setText("Music Converter");
        convertButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                convertButtonActionPerformed(evt);
            }
        });

        onlineLyricButton.setText("onlineLyric");
        onlineLyricButton.setToolTipText("");
        onlineLyricButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onlineLyricButtonActionPerformed(evt);
            }
        });

        jTextField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter URL"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(convertButton)
                    .addComponent(openMusic))
                .addGap(0, 81, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openButton)
                            .addComponent(onlineLyricButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(openButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(onlineLyricButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(openMusic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(convertButton))
        );

        perviousLineLable.setFont(new java.awt.Font("方正有猫在简体", 0, 14)); // NOI18N
        perviousLineLable.setForeground(new java.awt.Color(102, 102, 255));
        perviousLineLable.setText("PreviousLine");

        currentLineLabel.setFont(new java.awt.Font("方正有猫在简体", 0, 18)); // NOI18N
        currentLineLabel.setForeground(new java.awt.Color(0, 0, 255));
        currentLineLabel.setText("Test Music Player");

        nextLineLabel.setFont(new java.awt.Font("方正有猫在简体", 0, 14)); // NOI18N
        nextLineLabel.setForeground(new java.awt.Color(102, 102, 255));
        nextLineLabel.setText("nextLine");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(artistLabel)
                        .addComponent(lyricTitleLabel)
                        .addComponent(editorLabel)
                        .addComponent(albumLabel)
                        .addComponent(offsetLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(perviousLineLable))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentLineLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(nextLineLabel)))
                .addGap(0, 159, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lyricTitleLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(artistLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(albumLabel)
                        .addGap(15, 15, 15)
                        .addComponent(offsetLabel))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(perviousLineLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentLineLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextLineLabel)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startButton)
                        .addComponent(pauseButton)
                        .addComponent(stopButton))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openButtonActionPerformed
    {//GEN-HEADEREND:event_openButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Open lyric file");
            chooser.setFileFilter(LYRIC_FILTER);
            int confirmed = chooser.showOpenDialog(null);
            if (confirmed == JFileChooser.APPROVE_OPTION)
            {
                openLyric(chooser.getSelectedFile());
            }

        } catch (Exception ex)
        {
            Logger.getLogger(TestLyricReader.class.getName()).log(Level.SEVERE, null, ex);
            Warning warning = new Warning("err open your lyric " + ex.getMessage());
        }

    }//GEN-LAST:event_openButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
    {//GEN-HEADEREND:event_stopButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            stop();
        } catch (Exception e)
        {
            new Warning("err stop your music " + e.getMessage());
        }

    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed

        try
        {
            start();
        } catch (Exception e)
        {
            Warning warning = new Warning("Err start yr music" + e.getMessage());
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void openMusicActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openMusicActionPerformed
    {//GEN-HEADEREND:event_openMusicActionPerformed
        JFileChooser chooser;
        try
        {
            chooser = new JFileChooser(DB_CONNECTION.getDefaultSavingPath());
            chooser.setFileFilter(BackgroundMusic.MUSIC_FILTER);
            chooser.setDialogTitle("Open Music File");
            int confirmed = chooser.showOpenDialog(null);
            if (confirmed == JFileChooser.APPROVE_OPTION)
            {
                openMusic(chooser.getSelectedFile());
                
            }
        } catch (SQLException | UnsupportedAudioFileException | LineUnavailableException | IOException | JavaLayerException ex)
        {
            Logger.getLogger(TestLyricReader.class.getName()).log(Level.SEVERE, null, ex);
            Warning warning = new Warning("failed to open your music since  " + ex.getMessage());
        }


    }//GEN-LAST:event_openMusicActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pauseButtonActionPerformed
    {//GEN-HEADEREND:event_pauseButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            pause();
        } catch (Exception e)
        {
            Warning warning = new Warning(e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void positionSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_positionSliderStateChanged
    {//GEN-HEADEREND:event_positionSliderStateChanged
        // TODO add your handling code here:
        if(positionSlider.getValueIsAdjusting())
        {
            myClip.setMicrosecondPosition(positionSlider.getValue()*LyricLine.SECOND_MICROSECOND_RATIO);
            refreshTime();
            currentLineLabel.setText(lyricReader.tracePosition(myClip.getMicrosecondPosition()).getLyric());
            perviousLineLable.setText(lyricReader.getPreviousLine().getLyric());
            nextLineLabel.setText(lyricReader.getNextLine().getLyric());
        }
    }//GEN-LAST:event_positionSliderStateChanged

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_convertButtonActionPerformed
    {//GEN-HEADEREND:event_convertButtonActionPerformed
        // TODO add your handling code here:
        MusicConvertTool musicConvertTool = new MusicConvertTool(new BackgroundMusic());
    }//GEN-LAST:event_convertButtonActionPerformed

    private void onlineLyricButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onlineLyricButtonActionPerformed
    {//GEN-HEADEREND:event_onlineLyricButtonActionPerformed
        // TODO add your handling code here:
        try
        {
           openLyric(new File(new URI(jTextField1.getText()))); 
        } catch (Exception e)
        {
            Warning warning = new Warning("Your entered uri " + jTextField1.getText() + "is illegal since " + e.getMessage());
            warning.setBackground(Color.GREEN);
            
        }
        
    }//GEN-LAST:event_onlineLyricButtonActionPerformed

    /**
     * Open the lyric file.
     * @param file The file to be opened.
     * @throws IOException 
     */
    public void openLyric(File file) throws IOException
    {
        lyricReader = new LyricReader(file);
        lyricTitleLabel.setText("Title: " + lyricReader.getLyricTitle());
        artistLabel.setText("Artist: " + lyricReader.getArtist());
        editorLabel.setText("Editor: " + lyricReader.getEditor());
        albumLabel.setText("Album: " + lyricReader.getAlbum());
        offsetLabel.setText("Offset: " + lyricReader.getOffset());
        perviousLineLable.setText("");
        currentLineLabel.setText(lyricReader.getCurrentLine().getLyric());
        nextLineLabel.setText(lyricReader.getNextLine().getLyric());
        openButton.setEnabled(false);
        //startButton.setEnabled(true);
        //pauseButton.setEnabled(true);
        //stopButton.setEnabled(true); 

    }
    
    

    /**
     * Open the music file.
     * @param file music file to be opened.
     * @throws UnsupportedAudioFileException
     * @throws LineUnavailableException
     * @throws IOException
     * @throws JavaLayerException 
     */
    public void openMusic(File file) throws UnsupportedAudioFileException, LineUnavailableException, IOException, JavaLayerException
    {
        positionSlider.setValue(0);
        MyMusic music = new MyMusic("Test Music", file.getAbsolutePath(), MyMusic.TYPE_LOCAL);
        myClip.open(music.getAudioInputStream());
        positionSlider.setMaximum(new TimeConverter(myClip.getMicrosecondLength()).convertToSeconds());
        startButton.setEnabled(true);
        pauseButton.setEnabled(true);
        stopButton.setEnabled(true);
        openMusic.setEnabled(false);
    }

    /**
     * Start playing music.
     */
    public void start()
    {
        myClip.start();
        lyricTimer.start();
    }

    /**
     * Pause music.
     */
    public void pause()
    {
        myClip.stop();
        lyricTimer.stop();
    }

    /**
     *  Stop and close the music.
     */
    public void stop()
    {
        myClip.stop();
        myClip.close();
        lyricTimer.stop();
        openButton.setEnabled(true);
        openMusic.setEnabled(true);
        startButton.setEnabled(false);
        pauseButton.setEnabled(false);
        stopButton.setEnabled(false);
        positionSlider.setValue(0);
    }
    /**
     * Reload the time and persent it on the bar.
     */
public void refreshTime()
    {
        TimeConverter converter = new TimeConverter(myClip.getMicrosecondPosition());
        jLabel2.setText(converter.getMinutes() + ":" + converter.getSeconds());
        positionSlider.setValue(converter.convertToSeconds());
    }
/**
 * Refresh lyric.
 * @param position The current position.
 */
    public void refreshLyric(long position)
    {
       refreshTime();
        
        if (position >= lyricReader.getNextLine().getMicrosecondPosition())
        {
                lyricReader.nextLine();
                currentLineLabel.setText(lyricReader.getCurrentLine().getLyric());
                perviousLineLable.setText(lyricReader.getPreviousLine().getLyric());
                nextLineLabel.setText(lyricReader.getNextLine().getLyric());  
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(TestLyricReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(TestLyricReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(TestLyricReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(TestLyricReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new TestLyricReader().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel albumLabel;
    private javax.swing.JLabel artistLabel;
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel currentLineLabel;
    private javax.swing.JLabel editorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lyricTitleLabel;
    private javax.swing.JLabel nextLineLabel;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JButton onlineLyricButton;
    private javax.swing.JButton openButton;
    private javax.swing.JButton openMusic;
    private javax.swing.JButton pauseButton;
    private javax.swing.JLabel perviousLineLable;
    private javax.swing.JSlider positionSlider;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    private Clip myClip;
    private Timer lyricTimer;
    private LyricReader lyricReader;
    static final SecretGardenConnection DB_CONNECTION = new SecretGardenConnection();
}
